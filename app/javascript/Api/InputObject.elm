-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Enum.Class
import Api.Enum.ItemAttr
import Api.Enum.ItemCategory
import Api.Enum.ItemSlot
import Api.Enum.LocationCategory
import Api.Enum.Operator
import Api.Enum.ResourceResource
import Api.Enum.ResourceSize
import Api.Enum.StatEnum
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildFloatOperatorInputFilter :
    FloatOperatorInputFilterRequiredFields
    -> FloatOperatorInputFilter
buildFloatOperatorInputFilter required____ =
    { operator = required____.operator, value = required____.value }


type alias FloatOperatorInputFilterRequiredFields =
    { operator : Api.Enum.Operator.Operator
    , value : Float
    }


{-| Type for the FloatOperatorInputFilter input object.
-}
type alias FloatOperatorInputFilter =
    { operator : Api.Enum.Operator.Operator
    , value : Float
    }


{-| Encode a FloatOperatorInputFilter into a value that can be used as an argument.
-}
encodeFloatOperatorInputFilter : FloatOperatorInputFilter -> Value
encodeFloatOperatorInputFilter input____ =
    Encode.maybeObject
        [ ( "operator", Encode.enum Api.Enum.Operator.toString input____.operator |> Just ), ( "value", Encode.float input____.value |> Just ) ]


buildItemAttributes :
    ItemAttributesRequiredFields
    -> (ItemAttributesOptionalFields -> ItemAttributesOptionalFields)
    -> ItemAttributes
buildItemAttributes required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { buyPrice = Absent, sellPrice = Absent, requiredLevel = Absent, category = Absent, slot = Absent, stats = Absent, classes = Absent, attrs = Absent, startsQuest = Absent }
    in
    { name = required____.name, buyPrice = optionals____.buyPrice, sellPrice = optionals____.sellPrice, weight = required____.weight, requiredLevel = optionals____.requiredLevel, category = optionals____.category, slot = optionals____.slot, stats = optionals____.stats, classes = optionals____.classes, attrs = optionals____.attrs, startsQuest = optionals____.startsQuest }


type alias ItemAttributesRequiredFields =
    { name : String
    , weight : Float
    }


type alias ItemAttributesOptionalFields =
    { buyPrice : OptionalArgument Int
    , sellPrice : OptionalArgument Int
    , requiredLevel : OptionalArgument Int
    , category : OptionalArgument Api.Enum.ItemCategory.ItemCategory
    , slot : OptionalArgument Api.Enum.ItemSlot.ItemSlot
    , stats : OptionalArgument StatsInput
    , classes : OptionalArgument (List Api.Enum.Class.Class)
    , attrs : OptionalArgument (List Api.Enum.ItemAttr.ItemAttr)
    , startsQuest : OptionalArgument Api.ScalarCodecs.Id
    }


{-| Type for the ItemAttributes input object.
-}
type alias ItemAttributes =
    { name : String
    , buyPrice : OptionalArgument Int
    , sellPrice : OptionalArgument Int
    , weight : Float
    , requiredLevel : OptionalArgument Int
    , category : OptionalArgument Api.Enum.ItemCategory.ItemCategory
    , slot : OptionalArgument Api.Enum.ItemSlot.ItemSlot
    , stats : OptionalArgument StatsInput
    , classes : OptionalArgument (List Api.Enum.Class.Class)
    , attrs : OptionalArgument (List Api.Enum.ItemAttr.ItemAttr)
    , startsQuest : OptionalArgument Api.ScalarCodecs.Id
    }


{-| Encode a ItemAttributes into a value that can be used as an argument.
-}
encodeItemAttributes : ItemAttributes -> Value
encodeItemAttributes input____ =
    Encode.maybeObject
        [ ( "name", Encode.string input____.name |> Just ), ( "buyPrice", Encode.int |> Encode.optional input____.buyPrice ), ( "sellPrice", Encode.int |> Encode.optional input____.sellPrice ), ( "weight", Encode.float input____.weight |> Just ), ( "requiredLevel", Encode.int |> Encode.optional input____.requiredLevel ), ( "category", Encode.enum Api.Enum.ItemCategory.toString |> Encode.optional input____.category ), ( "slot", Encode.enum Api.Enum.ItemSlot.toString |> Encode.optional input____.slot ), ( "stats", encodeStatsInput |> Encode.optional input____.stats ), ( "classes", (Encode.enum Api.Enum.Class.toString |> Encode.list) |> Encode.optional input____.classes ), ( "attrs", (Encode.enum Api.Enum.ItemAttr.toString |> Encode.list) |> Encode.optional input____.attrs ), ( "startsQuest", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.startsQuest ) ]


buildLocationAttributes :
    LocationAttributesRequiredFields
    -> (LocationAttributesOptionalFields -> LocationAttributesOptionalFields)
    -> LocationAttributes
buildLocationAttributes required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { locX = Absent, locY = Absent, locZ = Absent }
    in
    { zoneId = required____.zoneId, name = required____.name, category = required____.category, locX = optionals____.locX, locY = optionals____.locY, locZ = optionals____.locZ }


type alias LocationAttributesRequiredFields =
    { zoneId : Api.ScalarCodecs.Id
    , name : String
    , category : Api.Enum.LocationCategory.LocationCategory
    }


type alias LocationAttributesOptionalFields =
    { locX : OptionalArgument Float
    , locY : OptionalArgument Float
    , locZ : OptionalArgument Float
    }


{-| Type for the LocationAttributes input object.
-}
type alias LocationAttributes =
    { zoneId : Api.ScalarCodecs.Id
    , name : String
    , category : Api.Enum.LocationCategory.LocationCategory
    , locX : OptionalArgument Float
    , locY : OptionalArgument Float
    , locZ : OptionalArgument Float
    }


{-| Encode a LocationAttributes into a value that can be used as an argument.
-}
encodeLocationAttributes : LocationAttributes -> Value
encodeLocationAttributes input____ =
    Encode.maybeObject
        [ ( "zoneId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.zoneId |> Just ), ( "name", Encode.string input____.name |> Just ), ( "category", Encode.enum Api.Enum.LocationCategory.toString input____.category |> Just ), ( "locX", Encode.float |> Encode.optional input____.locX ), ( "locY", Encode.float |> Encode.optional input____.locY ), ( "locZ", Encode.float |> Encode.optional input____.locZ ) ]


buildMonsterAttributes :
    MonsterAttributesRequiredFields
    -> (MonsterAttributesOptionalFields -> MonsterAttributesOptionalFields)
    -> MonsterAttributes
buildMonsterAttributes required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { level = Absent, elite = Absent, named = Absent, locX = Absent, locY = Absent, locZ = Absent, roamer = Absent }
    in
    { name = required____.name, locationId = required____.locationId, level = optionals____.level, elite = optionals____.elite, named = optionals____.named, locX = optionals____.locX, locY = optionals____.locY, locZ = optionals____.locZ, roamer = optionals____.roamer }


type alias MonsterAttributesRequiredFields =
    { name : String
    , locationId : Api.ScalarCodecs.Id
    }


type alias MonsterAttributesOptionalFields =
    { level : OptionalArgument Int
    , elite : OptionalArgument Bool
    , named : OptionalArgument Bool
    , locX : OptionalArgument Float
    , locY : OptionalArgument Float
    , locZ : OptionalArgument Float
    , roamer : OptionalArgument Bool
    }


{-| Type for the MonsterAttributes input object.
-}
type alias MonsterAttributes =
    { name : String
    , locationId : Api.ScalarCodecs.Id
    , level : OptionalArgument Int
    , elite : OptionalArgument Bool
    , named : OptionalArgument Bool
    , locX : OptionalArgument Float
    , locY : OptionalArgument Float
    , locZ : OptionalArgument Float
    , roamer : OptionalArgument Bool
    }


{-| Encode a MonsterAttributes into a value that can be used as an argument.
-}
encodeMonsterAttributes : MonsterAttributes -> Value
encodeMonsterAttributes input____ =
    Encode.maybeObject
        [ ( "name", Encode.string input____.name |> Just ), ( "locationId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.locationId |> Just ), ( "level", Encode.int |> Encode.optional input____.level ), ( "elite", Encode.bool |> Encode.optional input____.elite ), ( "named", Encode.bool |> Encode.optional input____.named ), ( "locX", Encode.float |> Encode.optional input____.locX ), ( "locY", Encode.float |> Encode.optional input____.locY ), ( "locZ", Encode.float |> Encode.optional input____.locZ ), ( "roamer", Encode.bool |> Encode.optional input____.roamer ) ]


buildNpcAttributes :
    NpcAttributesRequiredFields
    -> (NpcAttributesOptionalFields -> NpcAttributesOptionalFields)
    -> NpcAttributes
buildNpcAttributes required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { subtitle = Absent, vendor = Absent, locX = Absent, locY = Absent, locZ = Absent, roamer = Absent }
    in
    { locationId = required____.locationId, name = required____.name, subtitle = optionals____.subtitle, vendor = optionals____.vendor, locX = optionals____.locX, locY = optionals____.locY, locZ = optionals____.locZ, roamer = optionals____.roamer }


type alias NpcAttributesRequiredFields =
    { locationId : Api.ScalarCodecs.Id
    , name : String
    }


type alias NpcAttributesOptionalFields =
    { subtitle : OptionalArgument String
    , vendor : OptionalArgument Bool
    , locX : OptionalArgument Float
    , locY : OptionalArgument Float
    , locZ : OptionalArgument Float
    , roamer : OptionalArgument Bool
    }


{-| Type for the NpcAttributes input object.
-}
type alias NpcAttributes =
    { locationId : Api.ScalarCodecs.Id
    , name : String
    , subtitle : OptionalArgument String
    , vendor : OptionalArgument Bool
    , locX : OptionalArgument Float
    , locY : OptionalArgument Float
    , locZ : OptionalArgument Float
    , roamer : OptionalArgument Bool
    }


{-| Encode a NpcAttributes into a value that can be used as an argument.
-}
encodeNpcAttributes : NpcAttributes -> Value
encodeNpcAttributes input____ =
    Encode.maybeObject
        [ ( "locationId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.locationId |> Just ), ( "name", Encode.string input____.name |> Just ), ( "subtitle", Encode.string |> Encode.optional input____.subtitle ), ( "vendor", Encode.bool |> Encode.optional input____.vendor ), ( "locX", Encode.float |> Encode.optional input____.locX ), ( "locY", Encode.float |> Encode.optional input____.locY ), ( "locZ", Encode.float |> Encode.optional input____.locZ ), ( "roamer", Encode.bool |> Encode.optional input____.roamer ) ]


buildQuestAttributes :
    QuestAttributesRequiredFields
    -> (QuestAttributesOptionalFields -> QuestAttributesOptionalFields)
    -> QuestAttributes
buildQuestAttributes required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { prereqQuestId = Absent, droppedAsId = Absent, giverId = Absent, receiverId = Absent }
    in
    { name = required____.name, text = required____.text, prereqQuestId = optionals____.prereqQuestId, droppedAsId = optionals____.droppedAsId, giverId = optionals____.giverId, receiverId = optionals____.receiverId }


type alias QuestAttributesRequiredFields =
    { name : String
    , text : String
    }


type alias QuestAttributesOptionalFields =
    { prereqQuestId : OptionalArgument Api.ScalarCodecs.Id
    , droppedAsId : OptionalArgument Api.ScalarCodecs.Id
    , giverId : OptionalArgument Api.ScalarCodecs.Id
    , receiverId : OptionalArgument Api.ScalarCodecs.Id
    }


{-| Type for the QuestAttributes input object.
-}
type alias QuestAttributes =
    { name : String
    , text : String
    , prereqQuestId : OptionalArgument Api.ScalarCodecs.Id
    , droppedAsId : OptionalArgument Api.ScalarCodecs.Id
    , giverId : OptionalArgument Api.ScalarCodecs.Id
    , receiverId : OptionalArgument Api.ScalarCodecs.Id
    }


{-| Encode a QuestAttributes into a value that can be used as an argument.
-}
encodeQuestAttributes : QuestAttributes -> Value
encodeQuestAttributes input____ =
    Encode.maybeObject
        [ ( "name", Encode.string input____.name |> Just ), ( "text", Encode.string input____.text |> Just ), ( "prereqQuestId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.prereqQuestId ), ( "droppedAsId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.droppedAsId ), ( "giverId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.giverId ), ( "receiverId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.receiverId ) ]


buildQuestObjectiveAttributes :
    QuestObjectiveAttributesRequiredFields
    -> (QuestObjectiveAttributesOptionalFields -> QuestObjectiveAttributesOptionalFields)
    -> QuestObjectiveAttributes
buildQuestObjectiveAttributes required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { text = Absent, itemId = Absent, monsterId = Absent, amount = Absent }
    in
    { questId = required____.questId, text = optionals____.text, itemId = optionals____.itemId, monsterId = optionals____.monsterId, amount = optionals____.amount }


type alias QuestObjectiveAttributesRequiredFields =
    { questId : Api.ScalarCodecs.Id }


type alias QuestObjectiveAttributesOptionalFields =
    { text : OptionalArgument String
    , itemId : OptionalArgument Api.ScalarCodecs.Id
    , monsterId : OptionalArgument Api.ScalarCodecs.Id
    , amount : OptionalArgument Int
    }


{-| Type for the QuestObjectiveAttributes input object.
-}
type alias QuestObjectiveAttributes =
    { questId : Api.ScalarCodecs.Id
    , text : OptionalArgument String
    , itemId : OptionalArgument Api.ScalarCodecs.Id
    , monsterId : OptionalArgument Api.ScalarCodecs.Id
    , amount : OptionalArgument Int
    }


{-| Encode a QuestObjectiveAttributes into a value that can be used as an argument.
-}
encodeQuestObjectiveAttributes : QuestObjectiveAttributes -> Value
encodeQuestObjectiveAttributes input____ =
    Encode.maybeObject
        [ ( "questId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.questId |> Just ), ( "text", Encode.string |> Encode.optional input____.text ), ( "itemId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.itemId ), ( "monsterId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.monsterId ), ( "amount", Encode.int |> Encode.optional input____.amount ) ]


buildQuestRewardAttributes :
    QuestRewardAttributesRequiredFields
    -> (QuestRewardAttributesOptionalFields -> QuestRewardAttributesOptionalFields)
    -> QuestRewardAttributes
buildQuestRewardAttributes required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { text = Absent, itemId = Absent, skill = Absent, copper = Absent, standing = Absent, xp = Absent, amount = Absent }
    in
    { questId = required____.questId, text = optionals____.text, itemId = optionals____.itemId, skill = optionals____.skill, copper = optionals____.copper, standing = optionals____.standing, xp = optionals____.xp, amount = optionals____.amount }


type alias QuestRewardAttributesRequiredFields =
    { questId : Api.ScalarCodecs.Id }


type alias QuestRewardAttributesOptionalFields =
    { text : OptionalArgument String
    , itemId : OptionalArgument Api.ScalarCodecs.Id
    , skill : OptionalArgument String
    , copper : OptionalArgument Bool
    , standing : OptionalArgument Bool
    , xp : OptionalArgument Bool
    , amount : OptionalArgument Float
    }


{-| Type for the QuestRewardAttributes input object.
-}
type alias QuestRewardAttributes =
    { questId : Api.ScalarCodecs.Id
    , text : OptionalArgument String
    , itemId : OptionalArgument Api.ScalarCodecs.Id
    , skill : OptionalArgument String
    , copper : OptionalArgument Bool
    , standing : OptionalArgument Bool
    , xp : OptionalArgument Bool
    , amount : OptionalArgument Float
    }


{-| Encode a QuestRewardAttributes into a value that can be used as an argument.
-}
encodeQuestRewardAttributes : QuestRewardAttributes -> Value
encodeQuestRewardAttributes input____ =
    Encode.maybeObject
        [ ( "questId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.questId |> Just ), ( "text", Encode.string |> Encode.optional input____.text ), ( "itemId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.itemId ), ( "skill", Encode.string |> Encode.optional input____.skill ), ( "copper", Encode.bool |> Encode.optional input____.copper ), ( "standing", Encode.bool |> Encode.optional input____.standing ), ( "xp", Encode.bool |> Encode.optional input____.xp ), ( "amount", Encode.float |> Encode.optional input____.amount ) ]


buildResourceAttributes :
    ResourceAttributesRequiredFields
    -> ResourceAttributes
buildResourceAttributes required____ =
    { name = required____.name, locationId = required____.locationId, resource = required____.resource, size = required____.size, locX = required____.locX, locY = required____.locY, locZ = required____.locZ }


type alias ResourceAttributesRequiredFields =
    { name : String
    , locationId : Api.ScalarCodecs.Id
    , resource : Api.Enum.ResourceResource.ResourceResource
    , size : Api.Enum.ResourceSize.ResourceSize
    , locX : Float
    , locY : Float
    , locZ : Float
    }


{-| Type for the ResourceAttributes input object.
-}
type alias ResourceAttributes =
    { name : String
    , locationId : Api.ScalarCodecs.Id
    , resource : Api.Enum.ResourceResource.ResourceResource
    , size : Api.Enum.ResourceSize.ResourceSize
    , locX : Float
    , locY : Float
    , locZ : Float
    }


{-| Encode a ResourceAttributes into a value that can be used as an argument.
-}
encodeResourceAttributes : ResourceAttributes -> Value
encodeResourceAttributes input____ =
    Encode.maybeObject
        [ ( "name", Encode.string input____.name |> Just ), ( "locationId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.locationId |> Just ), ( "resource", Encode.enum Api.Enum.ResourceResource.toString input____.resource |> Just ), ( "size", Encode.enum Api.Enum.ResourceSize.toString input____.size |> Just ), ( "locX", Encode.float input____.locX |> Just ), ( "locY", Encode.float input____.locY |> Just ), ( "locZ", Encode.float input____.locZ |> Just ) ]


buildStatInputFilter :
    StatInputFilterRequiredFields
    -> StatInputFilter
buildStatInputFilter required____ =
    { stat = required____.stat, operator = required____.operator, value = required____.value }


type alias StatInputFilterRequiredFields =
    { stat : Api.Enum.StatEnum.StatEnum
    , operator : Api.Enum.Operator.Operator
    , value : Float
    }


{-| Type for the StatInputFilter input object.
-}
type alias StatInputFilter =
    { stat : Api.Enum.StatEnum.StatEnum
    , operator : Api.Enum.Operator.Operator
    , value : Float
    }


{-| Encode a StatInputFilter into a value that can be used as an argument.
-}
encodeStatInputFilter : StatInputFilter -> Value
encodeStatInputFilter input____ =
    Encode.maybeObject
        [ ( "stat", Encode.enum Api.Enum.StatEnum.toString input____.stat |> Just ), ( "operator", Encode.enum Api.Enum.Operator.toString input____.operator |> Just ), ( "value", Encode.float input____.value |> Just ) ]


buildStatsInput :
    (StatsInputOptionalFields -> StatsInputOptionalFields)
    -> StatsInput
buildStatsInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { damage = Absent, attackPower = Absent, hitRating = Absent, spellPower = Absent, spellCritChance = Absent, health = Absent, mana = Absent, armor = Absent, blockRating = Absent, dodge = Absent, parry = Absent, delay = Absent, endurance = Absent, healthRecoveryWhileResting = Absent, manaRecoveryWhileResting = Absent, fireResist = Absent, coldResist = Absent, poisonResist = Absent, chemicalResist = Absent, natureResist = Absent, magicResist = Absent, strength = Absent, stamina = Absent, constitution = Absent, agility = Absent, dexterity = Absent, intellect = Absent, wisdom = Absent, charisma = Absent }
    in
    { damage = optionals____.damage, attackPower = optionals____.attackPower, hitRating = optionals____.hitRating, spellPower = optionals____.spellPower, spellCritChance = optionals____.spellCritChance, health = optionals____.health, mana = optionals____.mana, armor = optionals____.armor, blockRating = optionals____.blockRating, dodge = optionals____.dodge, parry = optionals____.parry, delay = optionals____.delay, endurance = optionals____.endurance, healthRecoveryWhileResting = optionals____.healthRecoveryWhileResting, manaRecoveryWhileResting = optionals____.manaRecoveryWhileResting, fireResist = optionals____.fireResist, coldResist = optionals____.coldResist, poisonResist = optionals____.poisonResist, chemicalResist = optionals____.chemicalResist, natureResist = optionals____.natureResist, magicResist = optionals____.magicResist, strength = optionals____.strength, stamina = optionals____.stamina, constitution = optionals____.constitution, agility = optionals____.agility, dexterity = optionals____.dexterity, intellect = optionals____.intellect, wisdom = optionals____.wisdom, charisma = optionals____.charisma }


type alias StatsInputOptionalFields =
    { damage : OptionalArgument Int
    , attackPower : OptionalArgument Int
    , hitRating : OptionalArgument Int
    , spellPower : OptionalArgument Int
    , spellCritChance : OptionalArgument Int
    , health : OptionalArgument Int
    , mana : OptionalArgument Int
    , armor : OptionalArgument Int
    , blockRating : OptionalArgument Int
    , dodge : OptionalArgument Int
    , parry : OptionalArgument Int
    , delay : OptionalArgument Float
    , endurance : OptionalArgument Int
    , healthRecoveryWhileResting : OptionalArgument Int
    , manaRecoveryWhileResting : OptionalArgument Int
    , fireResist : OptionalArgument Int
    , coldResist : OptionalArgument Int
    , poisonResist : OptionalArgument Int
    , chemicalResist : OptionalArgument Int
    , natureResist : OptionalArgument Int
    , magicResist : OptionalArgument Int
    , strength : OptionalArgument Int
    , stamina : OptionalArgument Int
    , constitution : OptionalArgument Int
    , agility : OptionalArgument Int
    , dexterity : OptionalArgument Int
    , intellect : OptionalArgument Int
    , wisdom : OptionalArgument Int
    , charisma : OptionalArgument Int
    }


{-| Type for the StatsInput input object.
-}
type alias StatsInput =
    { damage : OptionalArgument Int
    , attackPower : OptionalArgument Int
    , hitRating : OptionalArgument Int
    , spellPower : OptionalArgument Int
    , spellCritChance : OptionalArgument Int
    , health : OptionalArgument Int
    , mana : OptionalArgument Int
    , armor : OptionalArgument Int
    , blockRating : OptionalArgument Int
    , dodge : OptionalArgument Int
    , parry : OptionalArgument Int
    , delay : OptionalArgument Float
    , endurance : OptionalArgument Int
    , healthRecoveryWhileResting : OptionalArgument Int
    , manaRecoveryWhileResting : OptionalArgument Int
    , fireResist : OptionalArgument Int
    , coldResist : OptionalArgument Int
    , poisonResist : OptionalArgument Int
    , chemicalResist : OptionalArgument Int
    , natureResist : OptionalArgument Int
    , magicResist : OptionalArgument Int
    , strength : OptionalArgument Int
    , stamina : OptionalArgument Int
    , constitution : OptionalArgument Int
    , agility : OptionalArgument Int
    , dexterity : OptionalArgument Int
    , intellect : OptionalArgument Int
    , wisdom : OptionalArgument Int
    , charisma : OptionalArgument Int
    }


{-| Encode a StatsInput into a value that can be used as an argument.
-}
encodeStatsInput : StatsInput -> Value
encodeStatsInput input____ =
    Encode.maybeObject
        [ ( "damage", Encode.int |> Encode.optional input____.damage ), ( "attackPower", Encode.int |> Encode.optional input____.attackPower ), ( "hitRating", Encode.int |> Encode.optional input____.hitRating ), ( "spellPower", Encode.int |> Encode.optional input____.spellPower ), ( "spellCritChance", Encode.int |> Encode.optional input____.spellCritChance ), ( "health", Encode.int |> Encode.optional input____.health ), ( "mana", Encode.int |> Encode.optional input____.mana ), ( "armor", Encode.int |> Encode.optional input____.armor ), ( "blockRating", Encode.int |> Encode.optional input____.blockRating ), ( "dodge", Encode.int |> Encode.optional input____.dodge ), ( "parry", Encode.int |> Encode.optional input____.parry ), ( "delay", Encode.float |> Encode.optional input____.delay ), ( "endurance", Encode.int |> Encode.optional input____.endurance ), ( "healthRecoveryWhileResting", Encode.int |> Encode.optional input____.healthRecoveryWhileResting ), ( "manaRecoveryWhileResting", Encode.int |> Encode.optional input____.manaRecoveryWhileResting ), ( "fireResist", Encode.int |> Encode.optional input____.fireResist ), ( "coldResist", Encode.int |> Encode.optional input____.coldResist ), ( "poisonResist", Encode.int |> Encode.optional input____.poisonResist ), ( "chemicalResist", Encode.int |> Encode.optional input____.chemicalResist ), ( "natureResist", Encode.int |> Encode.optional input____.natureResist ), ( "magicResist", Encode.int |> Encode.optional input____.magicResist ), ( "strength", Encode.int |> Encode.optional input____.strength ), ( "stamina", Encode.int |> Encode.optional input____.stamina ), ( "constitution", Encode.int |> Encode.optional input____.constitution ), ( "agility", Encode.int |> Encode.optional input____.agility ), ( "dexterity", Encode.int |> Encode.optional input____.dexterity ), ( "intellect", Encode.int |> Encode.optional input____.intellect ), ( "wisdom", Encode.int |> Encode.optional input____.wisdom ), ( "charisma", Encode.int |> Encode.optional input____.charisma ) ]


buildZoneAttributes :
    ZoneAttributesRequiredFields
    -> ZoneAttributes
buildZoneAttributes required____ =
    { name = required____.name }


type alias ZoneAttributesRequiredFields =
    { name : String }


{-| Type for the ZoneAttributes input object.
-}
type alias ZoneAttributes =
    { name : String }


{-| Encode a ZoneAttributes into a value that can be used as an argument.
-}
encodeZoneAttributes : ZoneAttributes -> Value
encodeZoneAttributes input____ =
    Encode.maybeObject
        [ ( "name", Encode.string input____.name |> Just ) ]
