-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.ResourceResource exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ResourceResource
    = Apple
    | Pine
    | Ash
    | Oak
    | Maple
    | Walnut
    | Asherite
    | Caspilrite
    | Padrium
    | Tascium
    | Slytheril
    | Vestium
    | Herb
    | Vegetable
    | Lily
    | WaterReed
    | Jute
    | Cotton
    | Flax
    | Blackberry
    | Gloomberry


list : List ResourceResource
list =
    [ Apple, Pine, Ash, Oak, Maple, Walnut, Asherite, Caspilrite, Padrium, Tascium, Slytheril, Vestium, Herb, Vegetable, Lily, WaterReed, Jute, Cotton, Flax, Blackberry, Gloomberry ]


decoder : Decoder ResourceResource
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "apple" ->
                        Decode.succeed Apple

                    "pine" ->
                        Decode.succeed Pine

                    "ash" ->
                        Decode.succeed Ash

                    "oak" ->
                        Decode.succeed Oak

                    "maple" ->
                        Decode.succeed Maple

                    "walnut" ->
                        Decode.succeed Walnut

                    "asherite" ->
                        Decode.succeed Asherite

                    "caspilrite" ->
                        Decode.succeed Caspilrite

                    "padrium" ->
                        Decode.succeed Padrium

                    "tascium" ->
                        Decode.succeed Tascium

                    "slytheril" ->
                        Decode.succeed Slytheril

                    "vestium" ->
                        Decode.succeed Vestium

                    "herb" ->
                        Decode.succeed Herb

                    "vegetable" ->
                        Decode.succeed Vegetable

                    "lily" ->
                        Decode.succeed Lily

                    "waterReed" ->
                        Decode.succeed WaterReed

                    "jute" ->
                        Decode.succeed Jute

                    "cotton" ->
                        Decode.succeed Cotton

                    "flax" ->
                        Decode.succeed Flax

                    "blackberry" ->
                        Decode.succeed Blackberry

                    "gloomberry" ->
                        Decode.succeed Gloomberry

                    _ ->
                        Decode.fail ("Invalid ResourceResource type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ResourceResource -> String
toString enum____ =
    case enum____ of
        Apple ->
            "apple"

        Pine ->
            "pine"

        Ash ->
            "ash"

        Oak ->
            "oak"

        Maple ->
            "maple"

        Walnut ->
            "walnut"

        Asherite ->
            "asherite"

        Caspilrite ->
            "caspilrite"

        Padrium ->
            "padrium"

        Tascium ->
            "tascium"

        Slytheril ->
            "slytheril"

        Vestium ->
            "vestium"

        Herb ->
            "herb"

        Vegetable ->
            "vegetable"

        Lily ->
            "lily"

        WaterReed ->
            "waterReed"

        Jute ->
            "jute"

        Cotton ->
            "cotton"

        Flax ->
            "flax"

        Blackberry ->
            "blackberry"

        Gloomberry ->
            "gloomberry"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ResourceResource
fromString enumString____ =
    case enumString____ of
        "apple" ->
            Just Apple

        "pine" ->
            Just Pine

        "ash" ->
            Just Ash

        "oak" ->
            Just Oak

        "maple" ->
            Just Maple

        "walnut" ->
            Just Walnut

        "asherite" ->
            Just Asherite

        "caspilrite" ->
            Just Caspilrite

        "padrium" ->
            Just Padrium

        "tascium" ->
            Just Tascium

        "slytheril" ->
            Just Slytheril

        "vestium" ->
            Just Vestium

        "herb" ->
            Just Herb

        "vegetable" ->
            Just Vegetable

        "lily" ->
            Just Lily

        "waterReed" ->
            Just WaterReed

        "jute" ->
            Just Jute

        "cotton" ->
            Just Cotton

        "flax" ->
            Just Flax

        "blackberry" ->
            Just Blackberry

        "gloomberry" ->
            Just Gloomberry

        _ ->
            Nothing
