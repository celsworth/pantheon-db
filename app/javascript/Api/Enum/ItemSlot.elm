-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.ItemSlot exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ItemSlot
    = Head
    | Shoulders
    | Hands
    | Back
    | Chest
    | Waist
    | Legs
    | Feet
    | Ears
    | Fingers
    | Neck
    | Relic
    | Onehanded
    | Twohanded
    | Offhand
    | Ranged


list : List ItemSlot
list =
    [ Head, Shoulders, Hands, Back, Chest, Waist, Legs, Feet, Ears, Fingers, Neck, Relic, Onehanded, Twohanded, Offhand, Ranged ]


decoder : Decoder ItemSlot
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "head" ->
                        Decode.succeed Head

                    "shoulders" ->
                        Decode.succeed Shoulders

                    "hands" ->
                        Decode.succeed Hands

                    "back" ->
                        Decode.succeed Back

                    "chest" ->
                        Decode.succeed Chest

                    "waist" ->
                        Decode.succeed Waist

                    "legs" ->
                        Decode.succeed Legs

                    "feet" ->
                        Decode.succeed Feet

                    "ears" ->
                        Decode.succeed Ears

                    "fingers" ->
                        Decode.succeed Fingers

                    "neck" ->
                        Decode.succeed Neck

                    "relic" ->
                        Decode.succeed Relic

                    "onehanded" ->
                        Decode.succeed Onehanded

                    "twohanded" ->
                        Decode.succeed Twohanded

                    "offhand" ->
                        Decode.succeed Offhand

                    "ranged" ->
                        Decode.succeed Ranged

                    _ ->
                        Decode.fail ("Invalid ItemSlot type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ItemSlot -> String
toString enum____ =
    case enum____ of
        Head ->
            "head"

        Shoulders ->
            "shoulders"

        Hands ->
            "hands"

        Back ->
            "back"

        Chest ->
            "chest"

        Waist ->
            "waist"

        Legs ->
            "legs"

        Feet ->
            "feet"

        Ears ->
            "ears"

        Fingers ->
            "fingers"

        Neck ->
            "neck"

        Relic ->
            "relic"

        Onehanded ->
            "onehanded"

        Twohanded ->
            "twohanded"

        Offhand ->
            "offhand"

        Ranged ->
            "ranged"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ItemSlot
fromString enumString____ =
    case enumString____ of
        "head" ->
            Just Head

        "shoulders" ->
            Just Shoulders

        "hands" ->
            Just Hands

        "back" ->
            Just Back

        "chest" ->
            Just Chest

        "waist" ->
            Just Waist

        "legs" ->
            Just Legs

        "feet" ->
            Just Feet

        "ears" ->
            Just Ears

        "fingers" ->
            Just Fingers

        "neck" ->
            Just Neck

        "relic" ->
            Just Relic

        "onehanded" ->
            Just Onehanded

        "twohanded" ->
            Just Twohanded

        "offhand" ->
            Just Offhand

        "ranged" ->
            Just Ranged

        _ ->
            Nothing
