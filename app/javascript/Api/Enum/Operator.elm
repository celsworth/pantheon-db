-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.Operator exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Operator
    = Eq
    | Lt
    | Lte
    | Gt
    | Gte


list : List Operator
list =
    [ Eq, Lt, Lte, Gt, Gte ]


decoder : Decoder Operator
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "EQ" ->
                        Decode.succeed Eq

                    "LT" ->
                        Decode.succeed Lt

                    "LTE" ->
                        Decode.succeed Lte

                    "GT" ->
                        Decode.succeed Gt

                    "GTE" ->
                        Decode.succeed Gte

                    _ ->
                        Decode.fail ("Invalid Operator type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Operator -> String
toString enum____ =
    case enum____ of
        Eq ->
            "EQ"

        Lt ->
            "LT"

        Lte ->
            "LTE"

        Gt ->
            "GT"

        Gte ->
            "GTE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Operator
fromString enumString____ =
    case enumString____ of
        "EQ" ->
            Just Eq

        "LT" ->
            Just Lt

        "LTE" ->
            Just Lte

        "GT" ->
            Just Gt

        "GTE" ->
            Just Gte

        _ ->
            Nothing
