-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module PantheonApi.Enum.Class exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Class
    = Bard
    | Cleric
    | Direlord
    | Druid
    | Enchanter
    | Monk
    | Necromancer
    | Paladin
    | Ranger
    | Rogue
    | Shaman
    | Summoner
    | Warrior
    | Wizard


list : List Class
list =
    [ Bard, Cleric, Direlord, Druid, Enchanter, Monk, Necromancer, Paladin, Ranger, Rogue, Shaman, Summoner, Warrior, Wizard ]


decoder : Decoder Class
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "bard" ->
                        Decode.succeed Bard

                    "cleric" ->
                        Decode.succeed Cleric

                    "direlord" ->
                        Decode.succeed Direlord

                    "druid" ->
                        Decode.succeed Druid

                    "enchanter" ->
                        Decode.succeed Enchanter

                    "monk" ->
                        Decode.succeed Monk

                    "necromancer" ->
                        Decode.succeed Necromancer

                    "paladin" ->
                        Decode.succeed Paladin

                    "ranger" ->
                        Decode.succeed Ranger

                    "rogue" ->
                        Decode.succeed Rogue

                    "shaman" ->
                        Decode.succeed Shaman

                    "summoner" ->
                        Decode.succeed Summoner

                    "warrior" ->
                        Decode.succeed Warrior

                    "wizard" ->
                        Decode.succeed Wizard

                    _ ->
                        Decode.fail ("Invalid Class type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Class -> String
toString enum____ =
    case enum____ of
        Bard ->
            "bard"

        Cleric ->
            "cleric"

        Direlord ->
            "direlord"

        Druid ->
            "druid"

        Enchanter ->
            "enchanter"

        Monk ->
            "monk"

        Necromancer ->
            "necromancer"

        Paladin ->
            "paladin"

        Ranger ->
            "ranger"

        Rogue ->
            "rogue"

        Shaman ->
            "shaman"

        Summoner ->
            "summoner"

        Warrior ->
            "warrior"

        Wizard ->
            "wizard"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Class
fromString enumString____ =
    case enumString____ of
        "bard" ->
            Just Bard

        "cleric" ->
            Just Cleric

        "direlord" ->
            Just Direlord

        "druid" ->
            Just Druid

        "enchanter" ->
            Just Enchanter

        "monk" ->
            Just Monk

        "necromancer" ->
            Just Necromancer

        "paladin" ->
            Just Paladin

        "ranger" ->
            Just Ranger

        "rogue" ->
            Just Rogue

        "shaman" ->
            Just Shaman

        "summoner" ->
            Just Summoner

        "warrior" ->
            Just Warrior

        "wizard" ->
            Just Wizard

        _ ->
            Nothing
