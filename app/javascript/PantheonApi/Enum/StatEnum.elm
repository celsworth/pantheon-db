-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module PantheonApi.Enum.StatEnum exposing (..)

import Json.Decode as Decode exposing (Decoder)


type StatEnum
    = Damage
    | AttackPower
    | HitRating
    | SpellPower
    | SpellCritChance
    | Health
    | Mana
    | Armor
    | BlockRating
    | Dodge
    | Parry
    | Delay
    | Endurance
    | HealthRecoveryWhileResting
    | ManaRecoveryWhileResting
    | FireResist
    | ColdResist
    | PoisonResist
    | ChemicalResist
    | NatureResist
    | MagicResist
    | Strength
    | Stamina
    | Constitution
    | Agility
    | Dexterity
    | Intellect
    | Wisdom
    | Charisma


list : List StatEnum
list =
    [ Damage, AttackPower, HitRating, SpellPower, SpellCritChance, Health, Mana, Armor, BlockRating, Dodge, Parry, Delay, Endurance, HealthRecoveryWhileResting, ManaRecoveryWhileResting, FireResist, ColdResist, PoisonResist, ChemicalResist, NatureResist, MagicResist, Strength, Stamina, Constitution, Agility, Dexterity, Intellect, Wisdom, Charisma ]


decoder : Decoder StatEnum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "damage" ->
                        Decode.succeed Damage

                    "attackPower" ->
                        Decode.succeed AttackPower

                    "hitRating" ->
                        Decode.succeed HitRating

                    "spellPower" ->
                        Decode.succeed SpellPower

                    "spellCritChance" ->
                        Decode.succeed SpellCritChance

                    "health" ->
                        Decode.succeed Health

                    "mana" ->
                        Decode.succeed Mana

                    "armor" ->
                        Decode.succeed Armor

                    "blockRating" ->
                        Decode.succeed BlockRating

                    "dodge" ->
                        Decode.succeed Dodge

                    "parry" ->
                        Decode.succeed Parry

                    "delay" ->
                        Decode.succeed Delay

                    "endurance" ->
                        Decode.succeed Endurance

                    "healthRecoveryWhileResting" ->
                        Decode.succeed HealthRecoveryWhileResting

                    "manaRecoveryWhileResting" ->
                        Decode.succeed ManaRecoveryWhileResting

                    "fireResist" ->
                        Decode.succeed FireResist

                    "coldResist" ->
                        Decode.succeed ColdResist

                    "poisonResist" ->
                        Decode.succeed PoisonResist

                    "chemicalResist" ->
                        Decode.succeed ChemicalResist

                    "natureResist" ->
                        Decode.succeed NatureResist

                    "magicResist" ->
                        Decode.succeed MagicResist

                    "strength" ->
                        Decode.succeed Strength

                    "stamina" ->
                        Decode.succeed Stamina

                    "constitution" ->
                        Decode.succeed Constitution

                    "agility" ->
                        Decode.succeed Agility

                    "dexterity" ->
                        Decode.succeed Dexterity

                    "intellect" ->
                        Decode.succeed Intellect

                    "wisdom" ->
                        Decode.succeed Wisdom

                    "charisma" ->
                        Decode.succeed Charisma

                    _ ->
                        Decode.fail ("Invalid StatEnum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : StatEnum -> String
toString enum____ =
    case enum____ of
        Damage ->
            "damage"

        AttackPower ->
            "attackPower"

        HitRating ->
            "hitRating"

        SpellPower ->
            "spellPower"

        SpellCritChance ->
            "spellCritChance"

        Health ->
            "health"

        Mana ->
            "mana"

        Armor ->
            "armor"

        BlockRating ->
            "blockRating"

        Dodge ->
            "dodge"

        Parry ->
            "parry"

        Delay ->
            "delay"

        Endurance ->
            "endurance"

        HealthRecoveryWhileResting ->
            "healthRecoveryWhileResting"

        ManaRecoveryWhileResting ->
            "manaRecoveryWhileResting"

        FireResist ->
            "fireResist"

        ColdResist ->
            "coldResist"

        PoisonResist ->
            "poisonResist"

        ChemicalResist ->
            "chemicalResist"

        NatureResist ->
            "natureResist"

        MagicResist ->
            "magicResist"

        Strength ->
            "strength"

        Stamina ->
            "stamina"

        Constitution ->
            "constitution"

        Agility ->
            "agility"

        Dexterity ->
            "dexterity"

        Intellect ->
            "intellect"

        Wisdom ->
            "wisdom"

        Charisma ->
            "charisma"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe StatEnum
fromString enumString____ =
    case enumString____ of
        "damage" ->
            Just Damage

        "attackPower" ->
            Just AttackPower

        "hitRating" ->
            Just HitRating

        "spellPower" ->
            Just SpellPower

        "spellCritChance" ->
            Just SpellCritChance

        "health" ->
            Just Health

        "mana" ->
            Just Mana

        "armor" ->
            Just Armor

        "blockRating" ->
            Just BlockRating

        "dodge" ->
            Just Dodge

        "parry" ->
            Just Parry

        "delay" ->
            Just Delay

        "endurance" ->
            Just Endurance

        "healthRecoveryWhileResting" ->
            Just HealthRecoveryWhileResting

        "manaRecoveryWhileResting" ->
            Just ManaRecoveryWhileResting

        "fireResist" ->
            Just FireResist

        "coldResist" ->
            Just ColdResist

        "poisonResist" ->
            Just PoisonResist

        "chemicalResist" ->
            Just ChemicalResist

        "natureResist" ->
            Just NatureResist

        "magicResist" ->
            Just MagicResist

        "strength" ->
            Just Strength

        "stamina" ->
            Just Stamina

        "constitution" ->
            Just Constitution

        "agility" ->
            Just Agility

        "dexterity" ->
            Just Dexterity

        "intellect" ->
            Just Intellect

        "wisdom" ->
            Just Wisdom

        "charisma" ->
            Just Charisma

        _ ->
            Nothing
