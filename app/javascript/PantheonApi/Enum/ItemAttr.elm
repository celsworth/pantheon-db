-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module PantheonApi.Enum.ItemAttr exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ItemAttr
    = NoTrade
    | Lifebound
    | Magic
    | QuestItem
    | Temporary
    | Unique


list : List ItemAttr
list =
    [ NoTrade, Lifebound, Magic, QuestItem, Temporary, Unique ]


decoder : Decoder ItemAttr
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "noTrade" ->
                        Decode.succeed NoTrade

                    "lifebound" ->
                        Decode.succeed Lifebound

                    "magic" ->
                        Decode.succeed Magic

                    "questItem" ->
                        Decode.succeed QuestItem

                    "temporary" ->
                        Decode.succeed Temporary

                    "unique" ->
                        Decode.succeed Unique

                    _ ->
                        Decode.fail ("Invalid ItemAttr type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ItemAttr -> String
toString enum____ =
    case enum____ of
        NoTrade ->
            "noTrade"

        Lifebound ->
            "lifebound"

        Magic ->
            "magic"

        QuestItem ->
            "questItem"

        Temporary ->
            "temporary"

        Unique ->
            "unique"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ItemAttr
fromString enumString____ =
    case enumString____ of
        "noTrade" ->
            Just NoTrade

        "lifebound" ->
            Just Lifebound

        "magic" ->
            Just Magic

        "questItem" ->
            Just QuestItem

        "temporary" ->
            Just Temporary

        "unique" ->
            Just Unique

        _ ->
            Nothing
